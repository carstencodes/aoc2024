type PointInMap = int * int
type Route = PointInMap list
type Direction = 
    | Up
    | Down
    | Left
    | Right

type MapContentPart = 
    | Free
    | Obstacle

type Waypoint = 
    | FreeWaypoint
    | ObstacleWaypoint
    | VisitedWaypoint of Direction
    | TurningWaypoint of (Direction * Direction)

type MapLayout = Map<int, Map<int, Waypoint>>

type Game = MapLayout * PointInMap * Direction * Route

let printGame (g: Game) obstructions =
    let matchInRoute route i j =
        route |> List.contains (i, j)

    let curPos i j pos =
        (i, j) = pos

    let visitedWayPointToChar dir =
        match dir with
        | Up -> '|'
        | Right -> '-'
        | Left -> '-'
        | Down -> '|'

    let dirToChar dir =
        match dir with
        | Up -> '^'
        | Right -> '>'
        | Left -> '<'
        | Down -> 'v'

    let map, pos, dir, route = g

    for i in [0..(map.Count-1)] do
        let line = map[i]
        for j in [0..(line.Count-1)] do
            let content = line[j]
            let char = 
                match content with
                | ObstacleWaypoint -> '#'
                | FreeWaypoint ->
                    if not (curPos i j pos)
                    then '.'
                    else dirToChar dir
                | TurningWaypoint _ -> '+'
                | VisitedWaypoint v -> visitedWayPointToChar v
            let charRevised = 
                if not(obstructions |> List.contains (i, j))
                then char
                else 'O'
            printf "%c" charRevised
        printfn ""

let getNextPos pos dir =
    let i, j = pos
    match dir with 
    | Up -> (i-1, j)
    | Left -> (i, j-1)
    | Right -> (i, j+1)
    | Down -> (i+1, j)

let isObstacle (map: MapLayout) postion =
    let i, j = postion
    let line = map[i]
    let point = line[j]

    point = ObstacleWaypoint

let leavesMap dimOfMap pos =
    let x, y = pos
    let maxX, maxY = dimOfMap

    let leavesX = ((x < 0) || (x >= maxX))
    let leavesY = ((y < 0) || (y >= maxY))

    leavesX || leavesY

let rotate dir =
    match dir with
    | Up -> Right
    | Right -> Down
    | Down -> Left
    | Left -> Up

let singleElement seq =
    if (seq |> Seq.length <> 1) 
    then
        printfn "%A" seq
        failwith "Sequence contains more than one item"
    else seq |> Seq.item 0

let dim (map: MapLayout) =
    let dimX = map.Count
    if dimX = 0
    then (0, 0)
    else (dimX, map.Values |> Seq.map (fun f -> f |> Seq.length) |> Seq.distinct |> singleElement)

let updateMap (map: MapLayout) (pos: PointInMap) (wayPoint: Waypoint) =
    let i, j = pos
    let line = map[i]
    let p = line[j]
    let updatedMap = 
        match p with
        | TurningWaypoint _ -> map
        | _ -> 
            let updatedLine = line |> Map.change j (fun s -> match s with
                                                                                  | Some _ -> Some wayPoint
                                                                                  | None -> None)
            map |> Map.change i (fun s -> match s with
                                                                        | Some _ -> Some updatedLine
                                                                        | None -> None )
    updatedMap

let playMove game =
    let map, pos, dir, route = game
    let mapSize = dim map
    let nextPos = getNextPos pos dir
    if leavesMap mapSize nextPos
    then (map, pos, dir, (route @ [pos])), true
    else
        if isObstacle map nextPos
        then
            let turned = rotate dir 
            (updateMap map pos (TurningWaypoint (dir, turned)), pos, turned, route), false
        else 
            ((updateMap map pos (VisitedWaypoint dir)), nextPos, dir, (route @ [pos])), false


let playGame game =
    let mutable currentGame, finished = game, false

    while not finished do
        let nextGame, nextFinished = playMove currentGame
        currentGame <- nextGame
        finished <- nextFinished

    currentGame


let parse (t: string) =
    let lines = t.Split System.Environment.NewLine
    let mutable gameMap = Map.empty<int, Map<int, Waypoint>>

    let mutable position = (-1, -1)
    let mutable currentDirection = Up

    for i in [0 .. ((lines |> Array.length) - 1)] do
        let changePositionAndMarkAsNoObstacle i j dir = 
            position <- (i, j)
            currentDirection <- dir
            FreeWaypoint

        let parseDirection c =
            match c with
            | '^' -> Up
            | '>' -> Right
            | '<' -> Left
            | 'v' -> Down
            | _ -> failwithf "Unexpected direction %c"c
        let line = (lines.[i]).ToCharArray()
        let mutable lineMap = Map.empty<int, Waypoint>
        let indexedLine = Array.indexed line
        for (j, part) in indexedLine do
            let content = 
                match part with
                | '#' -> ObstacleWaypoint
                | '.' -> FreeWaypoint
                | ('^' | '>' | '<' | 'v') -> changePositionAndMarkAsNoObstacle i j (parseDirection part)
                | _ -> failwithf "Unexpected character %c" part

            lineMap <- lineMap |> Map.add j content
        gameMap <- gameMap |> Map.add i lineMap

    let x, y = position
    assert (x >= 0)
    assert (y >= 0)

    (gameMap, position, currentDirection, [])

let isVisited (game: MapLayout) i j =
    let point = game[i][j]
    match point with
    | VisitedWaypoint _ -> true
    | TurningWaypoint _ -> true
    | _ -> false

let isNextToVisited map i j = 
    let dimOfMap = dim map
    
    (not(leavesMap dimOfMap (i + 1, j)) && isVisited map (i+1) j) // visitedDown 
    || (not(leavesMap dimOfMap (i - 1, j)) && isVisited map (i-1) j) // visitedUp 
    || (not(leavesMap dimOfMap (i, j - 1)) && isVisited map i (j-1)) //visitedLeft 
    || (not(leavesMap dimOfMap (i, j + 1)) && isVisited map i (j+1)) // visitedRight

let isVisitedOrFreeNextToVisited (game: MapLayout) i j =
    let point = game[i][j]
    match point with
    | VisitedWaypoint _ -> true
    | TurningWaypoint _ -> true
    | ObstacleWaypoint -> false
    | FreeWaypoint -> false //isNextToVisited game i j

let isCrossingInFinishedGame (map: MapLayout) (pos: PointInMap) dirInGame = 
    let dimOfMap = dim map
    let i, j = pos

    match dirInGame with
    | None -> false
    | Some dir -> 
        let turned = rotate dir
        let nextPos = getNextPos pos dir
        if (leavesMap dimOfMap nextPos)
        then false
        else
            let a, b = nextPos
            let p = map[a][b]
            match p with
            | VisitedWaypoint ndir -> ndir = turned
            | TurningWaypoint (_, ndir) -> ndir = turned
            | _ -> false

let cloneGame (game: MapLayout) i j =
    let mutable gameCopy = Map.empty<int, Map<int, Waypoint>>

    for a in [0 .. (game.Count - 1)] do
        let line = game[a]
        let mutable newLine = Map.empty<int, Waypoint>
        for b in [0..(line.Count - 1)] do
            let chr = (if (a, b) <> (i, j)
                                       then line[b]
                                       else ObstacleWaypoint)
            newLine <- newLine |> Map.add b chr
                                                    
        gameCopy <- gameCopy |> Map.add a newLine

    gameCopy

let isVisitedWithDirection (map: MapLayout) pos dir =
    let i, j = pos
    let point = map[i][j]
    match point with
    | VisitedWaypoint v -> dir = v
    | TurningWaypoint (v1, v2) -> dir = v1 || dir = v2
    | _ -> false

let playWithObstructions (game: Game) curField =
    let mutable currentGame, finished = game, false
    let originalMap, startPos, dir, _ = game 
    let mutable hasBeenVisited = (startPos = curField)
    let mutable visited = []
    let mutable curPos = startPos
    let mutable curDir = dir

    while not finished && not hasBeenVisited do
        visited <- (curPos, curDir) :: visited
        let nextGame, nextFinished = playMove currentGame
        let map, nextPos, nextDir, route = nextGame
        finished <- nextFinished
        currentGame <- (map, nextPos, nextDir, route)
        curPos <- nextPos
        curDir <- nextDir
        if not finished
        then 
            hasBeenVisited <- visited |> List.contains (nextPos, nextDir)

    hasBeenVisited

let example = """....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#..."""

let input = """.#....#...................#................#......................#.#...............#................#....#...........#..........#
.................................#.....#............#............#.......#...#...##........#..............................#.......
..............#.#............#...............................................##.................#....................#..#.........
..............#.............................#...........................#....#....#........#.................................#..#.
............#.#..#.#...........................#.....................................#..........#............#....................
.#......................................................................#..................................#......#............#.#
...........#.............................#....................#...#.....#........#....##.........................................#
......#..##.......................................................................#............#..................................
........#.......#..........#.......#........#..................#....................#.............#.....................#.........
................#....#.##.........................#........#....#.................#...............................................
.............#........................................#....................#...............#.....#.............#...............#..
..........#.........................#...#.......................#.............................................#......#............
........#................................................#..........#.............#.............#.........#....................#..
....#............#................#.....#.#................#..................#.................#.................................
....#.........................#.............#.....#..................#....#............#...................................#......
...##....................#.............#...............................................#..........................................
.....##.......................#...................#................#..........#.....................#...................#.........
....#....#..................................................#.......................................................#.............
...#........##.........................#.......................#........#...................#...........#...................#.....
.....................##.#...................................................................#.............#.......................
........#..............#...................................................#.....................#...#.......#..#.............#...
..................................................#.......#...............#.............#........#..#.....................#.......
..#..................#...............##..................#.#.........#..........#..............#....................#..#..........
...#..................................................#...........................................#........#......................
#.................................................#..............#...#..........#....................#....................#......#
..#...#....#...........#.................................#......................................#.......................#.....#...
...#...........#..#................................#......#.............#........................##.................#....#....#...
....................#.........#.......................................................................................#...........
............................................................#................#.#..#.....#.....................#...................
.......................................#......#....................................#........................................#.....
...........#.............#...............................#..........#.........#...#.......................................#.......
.............#...............................#.#...................................................#.....#............#...........
.......................................#...#....................#.#..........##.................#...............#............#....
....................#..#....#.............#..............#....#.........................................#.##.....#................
......##..............................................................................................#...........................
....#.......#.............................#..#.........#................................#.........#...............................
..........................................................................#...............................#...........#.#.........
...............#..................................................#.........#.....................#...............#...............
.........#......#............#.........#................................#..............................##.........................
...............#.....................................#............................................#........................#......
..#...........#...........................................#.........................................................#.............
................................#......##..#............................................................................#.........
.........#...........................................#....#..............#......................##....#..#........................
.....#.............#.....#........##......................#...#..................................................#.........#..#.#.
...........................#.........#.......#..........................##...........................#..............#.............
...............................................................................#..#........................#................#.#...
.....#.#.............................................................#.........#...........#..................................#...
.....#....#..#........#....................................#......................................................................
#......................................#..#..............................#..#................#........#...........................
.....................................................................................................#.......#....#.........#.....
....#....#............................................#................................................................#..........
......#.................#.......#..............................................#...................#..............................
...................#.........................................................................................#....................
.............................#................#.#......#...#.......................................#............#............#....
...........................................................#..........#..#.................##.....#..#............................
.....#......................................................#..............................#........................#.............
...............................................#.............#........#.......................................#.......#...........
.............................................................#.............................#...........#.#...................#....
.......#......#......#......................#..................................#^.......................#.........#.......#.......
...........................................................................................................#....................#.
.....#............#.....................#....................#....................................................................
....#...........#................#.....##.............................................................#....................#......
.................................#.#....................#......................#......................#.#.................#.......
..................#......#...#..........#............#................#...#.................................................#.....
...............................................................................................................#...#.........#....
...............#.........#..............................#.......#.......#.......#.................................................
.#........#...#......................................#........#...#.......................................................#..#....
.....#...............................................................#.....#..........#.........#.....................#...........
.........................................................................................................#...#.........#......#...
.....##..................#...#.....#.........#......................................#...............................#.............
..#...............................................................................................#...............................
........#..............................#.#........#.#..#...................................................#.#....................
........................................................#........................#..#.............................................
.....................#.......................#..................................#..........................#....#.................
.........................##.........#.................................#................................#....#.....................
..#........#.......................................................................#.....#........................................
.....#.....................................#.....#....................#...............#...........................................
......................#....................................................................................................#......
...#.........................#......................................................#.......#.......#..#.....................#....
............#...#....................................................#....#......#...............#.......#......................##
.......#.................................................#...#.....................#..................#...........................
.#...................#.....#.#..............................................................................#.....................
..........#...............#......#...........#......................................................#.....#.............#...#....#
.......##.........#.....................................................#....#.........................................#.........#
..##..................#............#..#........................................#..................#..##...........................
..................#....##..............................#.....#...............#.................................................#..
........#..........#...................#.............#...............#..#........#................................................
........#..............................................##....#....................................................................
.........#.#............#.........................#..............#................................#......................#........
........#.#............................#.....#....................................................................#...............
.......................................#......................#...........................#.......................................
..........................##.....................##..#............................................................................
#.............#..............................................................................#...........#........................
......#....#.....................................#........................#.......................................................
#...................#.#.......#.......#.....................#.....#...........................................#...................
...#.......................................#............................................#................#........................
...........#.............................#........................................................................................
...............................................................#.............#..................................................#.
.........#........#....#.#..............................................#.........................................................
.........#....#....#...................#..........#............................................#..##..............................
....#...#.......................#..#....................#...#..........................##..#....#.........................#.......
....#.....##...........................#.#..............#.......................#...#.......................................#.....
......................................................................................#.#..#.....#............##....#....#........
..............#..................................................................##....#.............#............................
................##...#..............#........................#.......................#.#...#......................#...............
...#............................#...#......#.#............#........#......................#........#................#.............
..........#.....................................#.....#...............................................................#.........##
.........#.......#...................#.#.........................................................#................................
...........................#.#............................#...................#.................#.........#.......................
.....#....#.........#................................................................................#...#..................#.....
...............................#....#............................#............................................#.............#.....
......#...............#......#.........................#.#........................................................................
.......................................................................................#...................#.........#.#..#.......
.....#...................................#..................................................................#........#............
...........................................#.......................................#....................#............#...#........
....#............................#..................................#.#....#......................#....#..#.......#...#...........
.#....#................................................#..................#.......##..........................#...#...............
........#...................##...........................................................#...................................#.#..
...#..........#.#....#...................#......#................................................................#................
....#............................#....#......#..#............#..................#........#..........#....#....#........#.#........
................#....#...............#...#.#..............................................#............#................#.........
.......#.....#.#.................#......................................................................#..#......................
.#......................#.................................................#......#..........#......#....................#.........
......#.#............................#............#.......#............#.....#....................................................
.#.............#.........#..................................................#...#...........#..........#............#..#..........
...........#......#...........#............................#.......#......#......#..........#....##..#............#...............
..........................#........#.........................................................#......#........................##...
.................#....#............#...#...........................#....#....#....#...#...........................................
.............#.......................................................#.........#..................................................
....#.................................#...............#.....#....#......##..............#.......................#........#........"""

let parsed = parse example
let finished = playGame parsed

let _, startPos, startDir, _ = parsed
printGame parsed []

let game, _, _, route = finished

printfn "%s" "--------------------------------------------------------------------"

printGame finished []

printfn "%i" (route |> List.distinct |> List.length)

let mutable obstructions = []

//for i in [0..(game.Count - 1)] do
//    let line = game[i]
    //for j in [0..(line.Count - 1)] do
for pos in route do
    let i, j = pos
    let dir = 
        match game[i][j] with
        | VisitedWaypoint v -> Some v
        | TurningWaypoint (_, t) -> Some t
        | _ -> None
    if isCrossingInFinishedGame game (i, j) dir
    //if isVisitedOrFreeNextToVisited game i j
    then
        let gameIJ = cloneGame game i j
        
        if (playWithObstructions (gameIJ, startPos, startDir, []) (i, j))
        then 
            obstructions <- obstructions @ [(i, j)]

printGame finished obstructions

printfn "%i" (obstructions |> List.length)
