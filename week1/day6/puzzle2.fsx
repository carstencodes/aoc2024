type Direction = 
    | Up
    | Down
    | Left
    | Right

type MapContentPart = 
    | Free
    | Visited of Direction
    | Turn of Direction
    | Obstacle
    | AssumedObstacle

type PointInMap = int * int

type MapDimension = int * int

type MapLayout = Map<PointInMap, MapContentPart> 

type MapInstance = MapLayout * MapDimension

type Game = MapInstance * PointInMap * Direction


let routePartToPointInRoute a =
    let pos, _ = a
    pos

let printGame (g: Game) =
    let curPos i j pos =
        (i, j) = pos

    let dirToChar dir =
        match dir with
        | Up -> '^'
        | Right -> '>'
        | Left -> '<'
        | Down -> 'v'

    let visitedToChar dir =
        match dir with
        | Up -> '|'
        | Right -> '-'
        | Left -> '-'
        | Down -> '|'

    let mapInstance, pos, dir = g
    let map, dimensions = mapInstance
    let maxX, maxY = dimensions

    for i in [0..(maxX-1)] do
        for j in [0..(maxY-1)] do
            let content = map[(i, j)]
            let char = 
                match content with
                | Obstacle -> '#'
                | Visited d -> 
                          if curPos i j pos
                          then dirToChar dir
                          else visitedToChar d
                | Turn _ -> '+'
                | AssumedObstacle -> 'O'
                | Free -> '.'
            printf "%c" char
        printfn ""

let getNextPos pos dir =
    let i, j = pos
    match dir with 
    | Up -> (i-1, j)
    | Left -> (i, j-1)
    | Right -> (i, j+1)
    | Down -> (i+1, j)

let isObstacle (map: MapLayout) postion =
    let point = map[postion]

    point = Obstacle

let isFree (map: MapLayout) postion =
    let point = map[postion]

    point = Free

let isVisited (map: MapLayout) postion direction =
    let point = map[postion]

    match point with
    | Visited v -> direction = v
    | _ -> false

let isTurn (map: MapLayout) postion direction =
    let point = map[postion]

    match point with
    | Turn t -> t = direction
    | _ -> false

let goesIntoDirection (map: MapLayout) postion direction =
    let point = map[postion]

    match point with
    | Turn t | Visited t -> t = direction
    | _ -> false

let leavesMap dimOfMap pos =
    let x, y = pos
    let maxX, maxY = dimOfMap

    let leavesX = ((x < 0) || (x >= maxX))
    let leavesY = ((y < 0) || (y >= maxY))

    leavesX || leavesY

let rotate dir =
    match dir with
    | Up -> Right
    | Right -> Down
    | Down -> Left
    | Left -> Up

let rec willGetSameRoute map dimensions position direction = 
    let nextPos = getNextPos position direction
    let leftMap = leavesMap dimensions nextPos
    let directionIsSame = not (leftMap) && goesIntoDirection map nextPos direction
    if directionIsSame
    then true
    else if leftMap
          then false
          else willGetSameRoute map dimensions nextPos direction

let playMove game =
    let mapInstance, pos, dir = game
    let map, mapSize = mapInstance
    let nextPos = getNextPos pos dir

    let mapLeft = leavesMap mapSize nextPos

    let hitsObstacle = not (mapLeft) && isObstacle map nextPos

    let nextValue = 
        if hitsObstacle
        then Turn (rotate dir)
        else Visited dir

    let nextIsFree = not(mapLeft) && isFree map nextPos
    let curIsTurn = isTurn map pos (rotate dir)
    let curIsVisitedInTurnedDirection = isVisited map pos (rotate dir)

    let posAhead = getNextPos pos (rotate dir)
    
    let rule1Matches = nextIsFree && curIsTurn
    let rule2Matches = nextIsFree && curIsVisitedInTurnedDirection 
    let rule4to6Matches = nextIsFree && willGetSameRoute map mapSize posAhead (rotate dir)
    let rule3Matches = false
    
    let couldReplace v =
        match v with
            | Some s -> 
                match s with
                | Free -> Some (nextValue)
                | Turn t -> Some (Turn t)
                | Obstacle -> Some Obstacle
                | AssumedObstacle -> Some AssumedObstacle
                | Visited v -> Some (Visited v)
            | None -> None

    let couldReplaceByAssumedObstacle v=
        match v with
            | Some s -> 
                match s with
                | Free -> Some (AssumedObstacle)
                | Turn t -> Some (Turn t)
                | Obstacle -> Some Obstacle
                | AssumedObstacle -> Some AssumedObstacle
                | Visited v -> Some (Visited v)
            | None -> None

    let newMap = map |> Map.change pos couldReplace

    let newMap = 
        if (rule1Matches || rule2Matches || rule3Matches || rule4to6Matches)
        then newMap |> Map.change nextPos couldReplaceByAssumedObstacle
        else newMap

    let mapInstance = newMap, mapSize

    if mapLeft
    then (mapInstance, pos, dir), true
    else
        if hitsObstacle
        then (mapInstance, pos, (rotate dir)), false
        else (mapInstance, nextPos, dir), false

let playGame game =
    let mutable currentGame, finished = game, false

    while not finished do
        let nextGame, nextFinished = playMove currentGame
        currentGame <- nextGame
        finished <- nextFinished

    currentGame

let parse (t: string) =
    let lines = t.Split System.Environment.NewLine
    let mutable gameMap = Map.empty<PointInMap, MapContentPart>

    let mutable position = (-1, -1)
    let mutable currentDirection = Up
    let mutable maxX= 0
    let mutable maxY = 0

    for i in [0 .. ((lines |> Array.length) - 1)] do
        maxX <- max maxX (i+1)
        let changePositionAndMarkAsNoObstacle i j dir = 
            position <- (i, j)
            currentDirection <- dir
            Turn dir

        let parseDirection c =
            match c with
            | '^' -> Up
            | '>' -> Right
            | '<' -> Left
            | 'v' -> Down
            | _ -> failwithf "Unexpected direction %c"c
        let line = (lines.[i]).ToCharArray()
        let mutable lineMap = Map.empty<int, MapContentPart>
        let indexedLine = Array.indexed line
        for (j, part) in indexedLine do
            maxY <- max maxY (j+1)
            let content = 
                match part with
                | '#' -> Obstacle
                | '.' -> Free
                | ('^' | '>' | '<' | 'v') -> changePositionAndMarkAsNoObstacle i j (parseDirection part)
                | _ -> failwithf "Unexpected character %c" part

            gameMap <- gameMap |> Map.add (i, j) content

    let x, y = position
    assert (x >= 0)
    assert (y >= 0)

    ((gameMap, (maxX, maxY)), position, currentDirection)
                

let example = """....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#..."""

let input = """.#....#...................#................#......................#.#...............#................#....#...........#..........#
.................................#.....#............#............#.......#...#...##........#..............................#.......
..............#.#............#...............................................##.................#....................#..#.........
..............#.............................#...........................#....#....#........#.................................#..#.
............#.#..#.#...........................#.....................................#..........#............#....................
.#......................................................................#..................................#......#............#.#
...........#.............................#....................#...#.....#........#....##.........................................#
......#..##.......................................................................#............#..................................
........#.......#..........#.......#........#..................#....................#.............#.....................#.........
................#....#.##.........................#........#....#.................#...............................................
.............#........................................#....................#...............#.....#.............#...............#..
..........#.........................#...#.......................#.............................................#......#............
........#................................................#..........#.............#.............#.........#....................#..
....#............#................#.....#.#................#..................#.................#.................................
....#.........................#.............#.....#..................#....#............#...................................#......
...##....................#.............#...............................................#..........................................
.....##.......................#...................#................#..........#.....................#...................#.........
....#....#..................................................#.......................................................#.............
...#........##.........................#.......................#........#...................#...........#...................#.....
.....................##.#...................................................................#.............#.......................
........#..............#...................................................#.....................#...#.......#..#.............#...
..................................................#.......#...............#.............#........#..#.....................#.......
..#..................#...............##..................#.#.........#..........#..............#....................#..#..........
...#..................................................#...........................................#........#......................
#.................................................#..............#...#..........#....................#....................#......#
..#...#....#...........#.................................#......................................#.......................#.....#...
...#...........#..#................................#......#.............#........................##.................#....#....#...
....................#.........#.......................................................................................#...........
............................................................#................#.#..#.....#.....................#...................
.......................................#......#....................................#........................................#.....
...........#.............#...............................#..........#.........#...#.......................................#.......
.............#...............................#.#...................................................#.....#............#...........
.......................................#...#....................#.#..........##.................#...............#............#....
....................#..#....#.............#..............#....#.........................................#.##.....#................
......##..............................................................................................#...........................
....#.......#.............................#..#.........#................................#.........#...............................
..........................................................................#...............................#...........#.#.........
...............#..................................................#.........#.....................#...............#...............
.........#......#............#.........#................................#..............................##.........................
...............#.....................................#............................................#........................#......
..#...........#...........................................#.........................................................#.............
................................#......##..#............................................................................#.........
.........#...........................................#....#..............#......................##....#..#........................
.....#.............#.....#........##......................#...#..................................................#.........#..#.#.
...........................#.........#.......#..........................##...........................#..............#.............
...............................................................................#..#........................#................#.#...
.....#.#.............................................................#.........#...........#..................................#...
.....#....#..#........#....................................#......................................................................
#......................................#..#..............................#..#................#........#...........................
.....................................................................................................#.......#....#.........#.....
....#....#............................................#................................................................#..........
......#.................#.......#..............................................#...................#..............................
...................#.........................................................................................#....................
.............................#................#.#......#...#.......................................#............#............#....
...........................................................#..........#..#.................##.....#..#............................
.....#......................................................#..............................#........................#.............
...............................................#.............#........#.......................................#.......#...........
.............................................................#.............................#...........#.#...................#....
.......#......#......#......................#..................................#^.......................#.........#.......#.......
...........................................................................................................#....................#.
.....#............#.....................#....................#....................................................................
....#...........#................#.....##.............................................................#....................#......
.................................#.#....................#......................#......................#.#.................#.......
..................#......#...#..........#............#................#...#.................................................#.....
...............................................................................................................#...#.........#....
...............#.........#..............................#.......#.......#.......#.................................................
.#........#...#......................................#........#...#.......................................................#..#....
.....#...............................................................#.....#..........#.........#.....................#...........
.........................................................................................................#...#.........#......#...
.....##..................#...#.....#.........#......................................#...............................#.............
..#...............................................................................................#...............................
........#..............................#.#........#.#..#...................................................#.#....................
........................................................#........................#..#.............................................
.....................#.......................#..................................#..........................#....#.................
.........................##.........#.................................#................................#....#.....................
..#........#.......................................................................#.....#........................................
.....#.....................................#.....#....................#...............#...........................................
......................#....................................................................................................#......
...#.........................#......................................................#.......#.......#..#.....................#....
............#...#....................................................#....#......#...............#.......#......................##
.......#.................................................#...#.....................#..................#...........................
.#...................#.....#.#..............................................................................#.....................
..........#...............#......#...........#......................................................#.....#.............#...#....#
.......##.........#.....................................................#....#.........................................#.........#
..##..................#............#..#........................................#..................#..##...........................
..................#....##..............................#.....#...............#.................................................#..
........#..........#...................#.............#...............#..#........#................................................
........#..............................................##....#....................................................................
.........#.#............#.........................#..............#................................#......................#........
........#.#............................#.....#....................................................................#...............
.......................................#......................#...........................#.......................................
..........................##.....................##..#............................................................................
#.............#..............................................................................#...........#........................
......#....#.....................................#........................#.......................................................
#...................#.#.......#.......#.....................#.....#...........................................#...................
...#.......................................#............................................#................#........................
...........#.............................#........................................................................................
...............................................................#.............#..................................................#.
.........#........#....#.#..............................................#.........................................................
.........#....#....#...................#..........#............................................#..##..............................
....#...#.......................#..#....................#...#..........................##..#....#.........................#.......
....#.....##...........................#.#..............#.......................#...#.......................................#.....
......................................................................................#.#..#.....#............##....#....#........
..............#..................................................................##....#.............#............................
................##...#..............#........................#.......................#.#...#......................#...............
...#............................#...#......#.#............#........#......................#........#................#.............
..........#.....................................#.....#...............................................................#.........##
.........#.......#...................#.#.........................................................#................................
...........................#.#............................#...................#.................#.........#.......................
.....#....#.........#................................................................................#...#..................#.....
...............................#....#............................#............................................#.............#.....
......#...............#......#.........................#.#........................................................................
.......................................................................................#...................#.........#.#..#.......
.....#...................................#..................................................................#........#............
...........................................#.......................................#....................#............#...#........
....#............................#..................................#.#....#......................#....#..#.......#...#...........
.#....#................................................#..................#.......##..........................#...#...............
........#...................##...........................................................#...................................#.#..
...#..........#.#....#...................#......#................................................................#................
....#............................#....#......#..#............#..................#........#..........#....#....#........#.#........
................#....#...............#...#.#..............................................#............#................#.........
.......#.....#.#.................#......................................................................#..#......................
.#......................#.................................................#......#..........#......#....................#.........
......#.#............................#............#.......#............#.....#....................................................
.#.............#.........#..................................................#...#...........#..........#............#..#..........
...........#......#...........#............................#.......#......#......#..........#....##..#............#...............
..........................#........#.........................................................#......#........................##...
.................#....#............#...#...........................#....#....#....#...#...........................................
.............#.......................................................#.........#..................................................
....#.................................#...............#.....#....#......##..............#.......................#........#........"""

let parsed = parse example
let finished = playGame parsed
printGame parsed

printfn "%s" "--------------------------------------------------------------------"

printGame finished

let mapInstance , _, _ = finished

let map, _ = mapInstance

let isVisitedPoint p =
    match p with
    | Free -> false
    | Obstacle -> false
    | _ -> true

let isAssumedObstaclePoint p =
    match p with
    | AssumedObstacle -> true
    | _ -> false


let visited = map.Values |> Seq.toList |> List.filter isAssumedObstaclePoint 

printfn "%i" (visited |> List.length)
